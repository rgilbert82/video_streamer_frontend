// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`class VideoPage extends _react2.default.Component {
  constructor(props) {
    super(props);

    this.state = {
      pageLoaded: false,
      video: {},
      chat: null };


    this.fetchVideo = this.fetchVideo.bind(this);
  }

  componentDidMount() {
    this._isMounted = true;
    if (this._isMounted) {
      this.fetchVideo();
    }
  }

  componentWillUnmount() {
    this._isMounted = false;
  }

  fetchVideo() {
    return (0, _videos.getVideoApi)(this.props.match.params.video_id).
    then(data => {
      this.setState({
        video: data.video,
        chat: data.chat,
        pageLoaded: true });
    }).catch(() => {
      this.props.displayMessage('There was an error loading the video.');
    });
  }

  render() {
    let content;

    if (this.state.pageLoaded) {
      content =
      _react2.default.createElement(_reactRouterDom.Switch, { __source: { fileName: _jsxFileName, lineNumber: 48 }, __self: this },
        _react2.default.createElement(_reactRouterDom.Route, { exact: true, path: '/videos/:video_id', render: () =>
          _react2.default.createElement(_.VideoMain, {
            video: this.state.video,
            chat: this.state.chat,
            loggedIn: this.props.loggedIn,
            currentUser: this.props.currentUser,
            displayMessage: this.props.displayMessage, __source: { fileName: _jsxFileName, lineNumber: 50 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 49 }, __self: this }),


        _react2.default.createElement(_reactRouterDom.Route, { exact: true, path: '/videos/:video_id/stats', render: props =>
          _react2.default.createElement(_.VideoStats, Object.assign({}, props, {
            video: this.state.video,
            displayMessage: this.props.displayMessage, __source: { fileName: _jsxFileName, lineNumber: 59 }, __self: this })), __source: { fileName: _jsxFileName, lineNumber: 58 }, __self: this }),



        _react2.default.createElement(_reactRouterDom.Route, { path: '/videos/:video_id/*', render: () => _react2.default.createElement(_Misc.NothingHere, { __source: { fileName: _jsxFileName, lineNumber: 65 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 65 }, __self: this }));


    } else {
      content = _react2.default.createElement(_Misc.PageLoading, { __source: { fileName: _jsxFileName, lineNumber: 69 }, __self: this });
    }

    return (
      _react2.default.createElement('section', { __source: { fileName: _jsxFileName, lineNumber: 73 }, __self: this },
        content));


  }} renders properly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <VideoPage
    displayMessage={[Function]}
    match={
        Object {
            "params": Object {
              "video_id": "12345",
            },
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <PageLoading />,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <PageLoading />,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
