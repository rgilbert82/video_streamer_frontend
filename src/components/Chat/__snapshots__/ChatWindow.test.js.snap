// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`class ChatWindow extends _react2.default.Component {
  constructor(props) {
    super(props);

    this.state = {
      messages: [],
      updating: false };


    this.fetchMessages = this.fetchMessages.bind(this);
    this.setFetchTimer = this.setFetchTimer.bind(this);
  }

  componentDidMount() {
    this._isMounted = true;
    if (this._isMounted) {
      this.fetchMessages();
    }
  }

  componentWillUnmount() {
    this._isMounted = false;
  }

  fetchMessages() {
    (0, _chats.getChatMessagesApi)(this.props.chat, this.state.updating).
    then(data => {
      if (data.comments.length > 0) {
        console.log(data.comments);
        this.setState({ updating: true, messages: this.state.messages.concat(data.comments) });
      }
      this.setFetchTimer(data.poll_interval);
    }).catch(err => {
      this.props.displayMessage('There was an error loading the chat messages.');
    });
  }

  setFetchTimer(interval) {
    interval = interval < 3000 ? 3000 : interval;

    if (this._isMounted) {
      setTimeout(() => {
        this.fetchMessages();
      }, interval);
    }
  }

  render() {
    return (
      _react2.default.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 54 }, __self: this },
        _react2.default.createElement(_.CommentsList, { __source: { fileName: _jsxFileName, lineNumber: 55 }, __self: this }),
        _react2.default.createElement(_.NewCommentForm, { __source: { fileName: _jsxFileName, lineNumber: 56 }, __self: this })));


  }} renders properly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChatWindow
    displayMessage={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <CommentsList />,
        <NewCommentForm />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <CommentsList />,
          <NewCommentForm />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`class ChatWindow extends _react2.default.Component {
  constructor(props) {
    super(props);

    this.state = {
      messages: [],
      updating: false };


    this.fetchMessages = this.fetchMessages.bind(this);
    this.setFetchTimer = this.setFetchTimer.bind(this);
  }

  componentDidMount() {
    this._isMounted = true;
    if (this._isMounted) {
      this.fetchMessages();
    }
  }

  componentWillUnmount() {
    this._isMounted = false;
  }

  fetchMessages() {
    (0, _chats.getChatMessagesApi)(this.props.chat, this.state.updating).
    then(data => {
      if (data.comments.length > 0) {
        console.log(data.comments);
        this.setState({ updating: true, messages: this.state.messages.concat(data.comments) });
      }
      this.setFetchTimer(data.poll_interval);
    }).catch(err => {
      this.props.displayMessage('There was an error loading the chat messages.');
    });
  }

  setFetchTimer(interval) {
    interval = interval < 3000 ? 3000 : interval;

    if (this._isMounted) {
      setTimeout(() => {
        this.fetchMessages();
      }, interval);
    }
  }

  render() {
    return (
      _react2.default.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 54 }, __self: this },
        _react2.default.createElement(_.CommentsList, { messages: this.state.messages, __source: { fileName: _jsxFileName, lineNumber: 55 }, __self: this }),
        _react2.default.createElement(_.NewCommentForm, { __source: { fileName: _jsxFileName, lineNumber: 56 }, __self: this })));


  }} renders properly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChatWindow
    displayMessage={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <CommentsList
          messages={Array []}
/>,
        <NewCommentForm />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "messages": Array [],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <CommentsList
            messages={Array []}
/>,
          <NewCommentForm />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "messages": Array [],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
