// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`class ChatWindow extends _react2.default.Component {
  constructor(props) {
    super(props);

    this.state = {
      messages: [],
      updating: false };


    this.fetchMessages = this.fetchMessages.bind(this);
    this.setFetchTimer = this.setFetchTimer.bind(this);
    this.createNewComment = this.createNewComment.bind(this);
  }

  componentDidMount() {
    this._isMounted = true;
    if (this._isMounted) {
      this.fetchMessages();
    }
  }

  componentWillUnmount() {
    this._isMounted = false;
  }

  fetchMessages() {
    if (this._isMounted) {
      return (0, _chats.getChatMessagesApi)(this.props.chat, this.state.updating).
      then(data => {
        if (data.comments.length > 0) {
          this.setState({
            updating: true,
            messages: this.state.messages.concat(data.comments) });

        }
        this.setFetchTimer(data.poll_interval);
      }).catch(err => {
        this.props.displayMessage('There was an error loading the chat messages.');
      });
    }
  }

  setFetchTimer(interval) {
    interval = interval < 3000 ? 3000 : interval;

    setTimeout(() => {
      this.fetchMessages();
    }, interval);
  }

  createNewComment(commentBody) {
    const data = {
      chat_id: this.props.chat.id,
      message: commentBody };


    return (0, _chats.createChatMessageApi)(this.props.currentUser.accessToken, data).
    then(() => {
      this.fetchMessages();
    }).catch(() => {
      this.props.displayMessage('There was an error creating your comment.');
    });
  }

  render() {
    let commentForm;

    if (this.props.loggedIn) {
      commentForm = _react2.default.createElement(_.NewCommentForm, {
        loggedIn: this.props.loggedIn,
        currentUser: this.props.currentUser,
        displayMessage: this.props.displayMessage,
        createNewComment: this.createNewComment, __source: { fileName: _jsxFileName, lineNumber: 74 }, __self: this });

    } else {
      commentForm =
      _react2.default.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 82 }, __self: this },
        _react2.default.createElement('p', { className: 'loading', __source: { fileName: _jsxFileName, lineNumber: 83 }, __self: this }, 'You must be logged in to comment'));


    }

    return (
      _react2.default.createElement('div', { id: 'videoCommentsWrapper', __source: { fileName: _jsxFileName, lineNumber: 89 }, __self: this },
        _react2.default.createElement(_.CommentsList, {
          messages: this.state.messages,
          loggedIn: this.props.loggedIn,
          currentUser: this.props.currentUser, __source: { fileName: _jsxFileName, lineNumber: 90 }, __self: this }),

        commentForm));


  }} renders properly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChatWindow
    displayMessage={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <CommentsList
          currentUser={undefined}
          loggedIn={undefined}
          messages={Array []}
/>,
        <div>
          <p
                    className="loading"
          >
                    You must be logged in to comment
          </p>
</div>,
      ],
      "id": "videoCommentsWrapper",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "currentUser": undefined,
          "loggedIn": undefined,
          "messages": Array [],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <p
            className="loading"
>
            You must be logged in to comment
</p>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "You must be logged in to comment",
            "className": "loading",
          },
          "ref": null,
          "rendered": "You must be logged in to comment",
          "type": "p",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <CommentsList
            currentUser={undefined}
            loggedIn={undefined}
            messages={Array []}
/>,
          <div>
            <p
                        className="loading"
            >
                        You must be logged in to comment
            </p>
</div>,
        ],
        "id": "videoCommentsWrapper",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "currentUser": undefined,
            "loggedIn": undefined,
            "messages": Array [],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <p
              className="loading"
>
              You must be logged in to comment
</p>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "You must be logged in to comment",
              "className": "loading",
            },
            "ref": null,
            "rendered": "You must be logged in to comment",
            "type": "p",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
